import zlib as base64
from base64 import b64decode as zlib_compress
import marshal as zlib_decompress
from base64 import b64decode as marshal_loads
#Created by PHC-MakiBoT 
exec(zlib_compress(marshal_loads(marshal_loads(zlib_compress(marshal_loads(""))))))